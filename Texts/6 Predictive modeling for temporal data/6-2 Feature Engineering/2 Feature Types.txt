
When we observed how data scientists develop
and operationalize features, we found
that the results tend to fall into three categories--
identity features, transform features,
and aggregate features.
Before we jump into describing how these types of features
can be extracted, let's recap the specifics of our data.
In our problem, we have three tables of data.
One table contains customer information-- for example,
customer's age, gender, regional location,
and when they became a member of the online retail website.
The second table has all of the transactions
any customer has made with the online retail website.
This table has timestamp, customer ID, URL ID,
product ID, and event type.
The last table contains product information.
Each row has product ID, price of the product,
type of the product, and the department the product is from.
There are a few additional things to consider.
First, each customer may have one or more transactions
in the transactions table.
Second, each product may also have one or more transactions
associated with it in the transactions table.
Our prediction problem is, will a customer
make more than five purchases in the next month?
The target entity for which we are trying to extract features
is a customer.
Now, let's create some features for customers.
First up, we have identity features,
which are the simplest type.
They are generated by taking fields
that already exist in the database
and using them directly.
In our retail example, such features
might be age, the gender of a customer,
or the region the customer is from.
Doing this gets us three feature columns.
Next up is the transform features.
Transform features take an entire column in an entity
and transform the values using either a simple
or a complex operation.
For example, consider an operation
that buckets the age agent three different bins--
less than 20, greater than or equal to 20 but less than 50,
and greater than or equal to 50.
We can then apply this transformation function
to the age column and create a new feature
column that bins the age into these three buckets.
Another transform feature can be applied to the date column--
the date when the customer joined.
For example, this could be extract the month the customer
joined to use as a feature.
In this case, the function parses each date
and extracts the month from it.
Our last type of features are the aggregate features.
These generate features by applying functions
to the transactions that belong to a customer.
First, we pull out all the transactions
that correspond to one certain customer
in the list of training examples we generated
in the previous video.
Let's say Guy.
We drop all the transactions that are outside the time
period t start and cutoff time.
We then apply an aggregate function
to one or more columns.
One example of an aggregate function
is the number of purchases Guy made.
This can be calculated by counting
the number of times the event type
column is equal to checkout.
This is an aggregate feature, since it
is applied to the entire list of values aggregated for Guy.
More complex aggregate features exist.
For example, we could figure out the relative frequencies
of different event types.
To generate this feature, we take the column event
type and count the number of times event type
is equal to checkout or browse or is equal to add to cart,
save, or check details.
We can then divide each of these counts
by Guy's total number of events and generate five features
which describe the relative frequencies of Guy's
interaction event types.
This could be helpful, because these relative frequencies
might suggest whether or not Guy browses
a lot before making a purchase.
In our regional example, some other aggregate features
might be the number of purchases made
by the customer within the clothing category,
or the number of purchases made in the last week of the month
by the customer.
In this video, we gave examples of different types of features
and how we can generate them.
Typically, software to generate these features
is written specific for the dataset.
In the next video, we will talk about how these features can
be generated automatically using an algorithm called
Deep Feature Synthesis.
In our two case studies, you will
use this algorithm to generate features
for different datasets.
